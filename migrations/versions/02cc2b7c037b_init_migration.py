"""Init migration

Revision ID: 02cc2b7c037b
Revises: 
Create Date: 2025-01-03 11:49:10.458264

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '02cc2b7c037b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DROP TYPE IF EXISTS usertypeenum CASCADE')
    op.execute('DROP TYPE IF EXISTS genderenum CASCADE')
    op.execute('DROP TYPE IF EXISTS relationshipstatusenum CASCADE')
    op.execute('DROP TYPE IF EXISTS appointmentstatusenum CASCADE')
    op.create_table('hospitals',
    sa.Column('hospital_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('hospital_name', sa.String(length=255), nullable=False),
    sa.Column('hospital_address', sa.String(length=255), nullable=True),
    sa.Column('hospital_phone', sa.String(length=15), nullable=True),
    sa.Column('hospital_email', sa.String(length=255), nullable=True),
    sa.Column('hospital_image', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('hospital_id')
    )
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), server_default='1234', nullable=False),
    sa.Column('user_type', sa.Enum('DOCTOR', 'PATIENT', name='usertypeenum'), nullable=False),
    sa.Column('fullname', sa.String(length=255), nullable=False),
    sa.Column('date_of_birth', sa.Date(), nullable=False),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', name='genderenum'), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=15), nullable=True),
    sa.Column('profile_image', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('departments',
    sa.Column('department_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('department_name', sa.String(length=255), nullable=False),
    sa.Column('department_location', sa.String(length=255), nullable=True),
    sa.Column('hospital_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['hospital_id'], ['hospitals.hospital_id'], ),
    sa.PrimaryKeyConstraint('department_id')
    )
    op.create_table('doctors',
    sa.Column('doctor_id', sa.Integer(), nullable=False),
    sa.Column('doctor_specialty', sa.String(length=255), nullable=False),
    sa.Column('doctor_experience', sa.Integer(), nullable=True),
    sa.Column('profile_image', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('doctor_id')
    )
    op.create_table('patients',
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('profile_image', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('patient_id')
    )
    op.create_table('clinic_rooms',
    sa.Column('room_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('room_name', sa.String(length=255), nullable=False),
    sa.Column('room_location', sa.String(length=255), nullable=True),
    sa.Column('room_image', sa.String(length=255), nullable=True),
    sa.Column('department_id', sa.Integer(), nullable=True),
    sa.Column('hospital_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.department_id'], ),
    sa.ForeignKeyConstraint(['hospital_id'], ['hospitals.hospital_id'], ),
    sa.PrimaryKeyConstraint('room_id')
    )
    op.create_table('doctor_hospitals',
    sa.Column('relationship_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=True),
    sa.Column('hospital_id', sa.Integer(), nullable=True),
    sa.Column('work_schedule', sa.String(length=255), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('relationship_status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'TERMINATED', name='relationshipstatusenum'), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doctor_id'], ),
    sa.ForeignKeyConstraint(['hospital_id'], ['hospitals.hospital_id'], ),
    sa.PrimaryKeyConstraint('relationship_id')
    )
    op.create_table('patient_doctor_relationships',
    sa.Column('relationship_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=True),
    sa.Column('doctor_id', sa.Integer(), nullable=True),
    sa.Column('relationship_type', sa.String(length=50), nullable=False),
    sa.Column('relationship_status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'TERMINATED', name='relationshipstatusenum'), nullable=False),
    sa.Column('relationship_start_date', sa.Date(), nullable=False),
    sa.Column('relationship_end_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doctor_id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.patient_id'], ),
    sa.PrimaryKeyConstraint('relationship_id')
    )
    op.create_table('patient_hospitals',
    sa.Column('relationship_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=True),
    sa.Column('hospital_id', sa.Integer(), nullable=True),
    sa.Column('relationship_type', sa.String(length=50), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['hospital_id'], ['hospitals.hospital_id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.patient_id'], ),
    sa.PrimaryKeyConstraint('relationship_id')
    )
    op.create_table('appointments',
    sa.Column('appointment_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('appointment_day', sa.DateTime(), nullable=False),
    sa.Column('appointment_status', sa.Enum('SCHEDULED', 'CANCELLED', 'COMPLETED', 'IN_PROGRESS', name='appointmentstatusenum'), nullable=False),
    sa.Column('appointment_reason', sa.String(length=255), nullable=True),
    sa.Column('patient_id', sa.Integer(), nullable=True),
    sa.Column('doctor_id', sa.Integer(), nullable=True),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.Column('hospital_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doctor_id'], ),
    sa.ForeignKeyConstraint(['hospital_id'], ['hospitals.hospital_id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.patient_id'], ),
    sa.ForeignKeyConstraint(['room_id'], ['clinic_rooms.room_id'], ),
    sa.PrimaryKeyConstraint('appointment_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('appointments')
    op.drop_table('patient_hospitals')
    op.drop_table('patient_doctor_relationships')
    op.drop_table('doctor_hospitals')
    op.drop_table('clinic_rooms')
    op.drop_table('patients')
    op.drop_table('doctors')
    op.drop_table('departments')
    op.drop_table('users')
    op.drop_table('hospitals')

    # Clean up enum types
    op.execute('DROP TYPE IF EXISTS usertypeenum')
    op.execute('DROP TYPE IF EXISTS genderenum')
    op.execute('DROP TYPE IF EXISTS relationshipstatusenum')
    op.execute('DROP TYPE IF EXISTS appointmentstatusenum')
    # ### end Alembic commands ###
